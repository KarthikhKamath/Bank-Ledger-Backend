// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: bankLedger/v1/transaction.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTransactionCreateTransaction = "/bankLedger.v1.Transaction/CreateTransaction"
const OperationTransactionGetTransactionById = "/bankLedger.v1.Transaction/GetTransactionById"
const OperationTransactionGetTransactionsByAccount = "/bankLedger.v1.Transaction/GetTransactionsByAccount"

type TransactionHTTPServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionResponse, error)
	GetTransactionsByAccount(context.Context, *GetTransactionsByAccountRequest) (*GetTransactionsByAccountResponse, error)
}

func RegisterTransactionHTTPServer(s *http.Server, srv TransactionHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/transaction", _Transaction_CreateTransaction0_HTTP_Handler(srv))
	r.GET("/v1/transaction/{transaction_id}", _Transaction_GetTransactionById0_HTTP_Handler(srv))
	r.GET("/v1/account/{account_id}/transactions", _Transaction_GetTransactionsByAccount0_HTTP_Handler(srv))
}

func _Transaction_CreateTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTransactionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionCreateTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTransaction(ctx, req.(*CreateTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTransactionResponse)
		return ctx.Result(200, reply)
	}
}

func _Transaction_GetTransactionById0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransactionByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionGetTransactionById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransactionById(ctx, req.(*GetTransactionByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransactionResponse)
		return ctx.Result(200, reply)
	}
}

func _Transaction_GetTransactionsByAccount0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransactionsByAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionGetTransactionsByAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransactionsByAccount(ctx, req.(*GetTransactionsByAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransactionsByAccountResponse)
		return ctx.Result(200, reply)
	}
}

type TransactionHTTPClient interface {
	CreateTransaction(ctx context.Context, req *CreateTransactionRequest, opts ...http.CallOption) (rsp *CreateTransactionResponse, err error)
	GetTransactionById(ctx context.Context, req *GetTransactionByIdRequest, opts ...http.CallOption) (rsp *GetTransactionResponse, err error)
	GetTransactionsByAccount(ctx context.Context, req *GetTransactionsByAccountRequest, opts ...http.CallOption) (rsp *GetTransactionsByAccountResponse, err error)
}

type TransactionHTTPClientImpl struct {
	cc *http.Client
}

func NewTransactionHTTPClient(client *http.Client) TransactionHTTPClient {
	return &TransactionHTTPClientImpl{client}
}

func (c *TransactionHTTPClientImpl) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...http.CallOption) (*CreateTransactionResponse, error) {
	var out CreateTransactionResponse
	pattern := "/v1/transaction"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionCreateTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TransactionHTTPClientImpl) GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...http.CallOption) (*GetTransactionResponse, error) {
	var out GetTransactionResponse
	pattern := "/v1/transaction/{transaction_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionGetTransactionById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TransactionHTTPClientImpl) GetTransactionsByAccount(ctx context.Context, in *GetTransactionsByAccountRequest, opts ...http.CallOption) (*GetTransactionsByAccountResponse, error) {
	var out GetTransactionsByAccountResponse
	pattern := "/v1/account/{account_id}/transactions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionGetTransactionsByAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
